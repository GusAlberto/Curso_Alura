<?php

/* ARRASTE PARA BAIXO ðŸ‘‡ 
Criando classe com suas atribuiÃ§Ãµes e funcionalidades
~~~~~Explanation topics~~~~~
1- Nomes de classes como se fossem *substantivo* e nome de mÃ©todos como se fossem *verbos*;
------------------------------------------------------------------------------------------------------------------------
2- Pseudo-variÃ¡velÂ $THISÂ passa a referÃªncia(passar o conteÃºdo completo) para o objeto que chamou o mÃ©todo atual;
------------------------------------------------------------------------------------------------------------------------
3- Early Return: Ã© colocar na funÃ§Ã£o um return para finalizar logo apÃ³s ter algum erro;
------------------------------------------------------------------------------------------------------------------------
4- Ã‰ uma boa prÃ¡tica/recomendaÃ§Ã£o geral deixar todos os Atributos privados e somente os MÃ©todos pÃºblicos;
4.1- MAS nem todo mÃ©todo deve ser pÃºblico;
------------------------------------------------------------------------------------------------------------------------
5- Criamos mÃ©todos de acesso Getters(get) e Setters(set) para poder acessar as propriedades privados;
------------------------------------------------------------------------------------------------------------------------
6- O mÃ©todo mÃ¡gico construtor(__construc) serve para obrigar a informar os atributos da classe para criar o objeto;
6.1- Devemos criar a instÃ¢ncia apenas de forma que ela seja vÃ¡lida, ou seja, nÃ£o add muitas regras! ;
6.2- Nota: Todos os mÃ©todos mÃ¡gicos DEVEM ser declarados como public (DocumentaÃ§Ã£o PHP);
------------------------------------------------------------------------------------------------------------------------
7- Self Ã© nome da funÃ§Ã£o quando iremos mencionar nossa Classe no mÃ©todo __construct;
------------------------------------------------------------------------------------------------------------------------
8- MÃ©todo mÃ¡gico __destruct Ã© utilizado para apagar as instÃ¢ncias(objetos);
8.1- SÃ£o destruidos objetos que nÃ£o tem nenhuma referÃªncia, que nada estÃ¡ apontando para ele;
------------------------------------------------------------------------------------------------------------------------
9- Quando atribuÃ­mos static Ã  uma funÃ§Ã£o, significa que o atributo passa a existir junto com a prÃ³pria classe;
9.1- Ou seja, as funÃ§Ãµes estÃ¡ticas sÃ£o associadas Ã  classe, nÃ£o a uma instÃ¢ncia da classe;
9.2- Pode ser acessada sem a criaÃ§Ã£o de um objeto.
------------------------------------------------------------------------------------------------------------------------
10- ComposiÃ§Ã£o de objetos Ã© quando desmembramos uma classe(Conta) em diversos outros classes(Titular) e objetos; 
------------------------------------------------------------------------------------------------------------------------
11- Classe abstrata nÃ£o pode ser instanciada;
11.1- SÃ³ podemos criar objetos das classes que extendem a classe abstrata pai;
11.2- Tendo um mÃ©todo abstrato, obriga que todas as classes filhas implementem aquele mÃ©todo
------------------------------------------------------------------------------------------------------------------------

*/

namespace Alura\Banco\Modelo\Conta;

abstract class Conta
{
// Definindo o que a classe precisa ter = ATRIBUTOS / PROPRIEDADES
    private Titular $titular;
    private float $saldo;
    public static $numeroDeContas = 0;

// Definindo mÃ©todos mÃ¡gicos da classe = IrÃ£o inicializar/rodar sempre que a classe for instanciada
    public function __construct(Titular $titular)
    {
       $this->titular = $titular;
       $this->saldo = 0;  

       self::$numeroDeContas++ ;
       echo "Conta nova foi criada" . PHP_EOL;
    }

    public function __destruct()
    {
        self::$numeroDeContas--;
    }

// Definindo comportamentos da classe = MÃ‰TODOS

    abstract public function percentualTarifa(): float
    {
        ;
    }

    public function saca(float $valorASacar): void
    {
        $tarifaSaque = $valorASacar * $this->percentualTarifa();
        $valorSaque = $valorASacar + $tarifaSaque;
        if ($valorASacar > $this->saldo) {
            echo "Saldo indisponÃ­vel.";
            return;
        }
        $this->saldo -= $valorASacar;   
    }

    public function deposita(float $valorADepositar): string
    {
        if ($valorADepositar < 0) {
            return "Valor precisa ser positivo.";
        }

        $this->saldo += $valorADepositar;
        $mensagemDeposito =  "$this->saldo";
        
        return $mensagemDeposito;
    }

    public function mostraTitular(): string
    {
        return $this->titular->getNome();
    }

    public function mostraCPF(): string
    {
        return $this->titular->getCPF();
    }

    public function mostraEndereco(): string
    {
        return $this->endereco->getNumero();
    }

    public function mostraSaldo(): string
    {
        return "$this->saldo";
    }

    public static function mostrarNumeroDeContas(): int
    {
        return self::$numeroDeContas;
    }

    
}
;